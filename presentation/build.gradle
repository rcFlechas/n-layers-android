plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'jacoco'
}

task jacocoTestReport (
        type: JacocoReport,
        dependsOn: [
                'testDebugUnitTest',
                'connectedAndroidTest',
                ':domain:test',
                ':data:test',
                ':database:test'
        ]
){

    def domain = project(":domain")
    def domainClasses = layout.files("$domain.buildDir/classes/kotlin/main")
    def domainSources = layout.files("$domain.projectDir/src/main/java")
    def domainExecutionFiles = layout.files("$domain.buildDir/jacoco/test.exec")

    def directoriesToCoverage = layout.files("$buildDir/tmp/kotlin-classes/debug", domainClasses)
    def mainSources = layout.files("$project.projectDir/src/main/java", domainSources)

    def executionFilesFromConnectedAndroidTest = fileTree(
            dir: "$buildDir",
            includes: ["outputs/code_coverage/debugAndroidTest/connected/**coverage.ec"]
    )
    def executionFileForUnitTestInModule = "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"

    def executionFiles = layout.files(
            executionFilesFromConnectedAndroidTest,
            executionFileForUnitTestInModule,
            domainExecutionFiles
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([directoriesToCoverage.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }
}


android {
    compileSdk compile_sdk
    buildToolsVersion build_tools_version

    defaultConfig {
        applicationId application_id
        minSdk min_sdk
        targetSdk target_sdk
        versionCode version_code
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = jvm_target
    }
}

dependencies {

    implementation project(":domain")
    implementation project(":database")
    implementation project(":data")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // RX
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    testImplementation "junit:junit:$junit_version"

    androidTestImplementation "androidx.test.ext:junit:$android_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
}